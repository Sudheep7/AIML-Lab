import random  
import csv as csv    
with open("trainingexamples.csv") as csvfile:
    examples=[tuple(line) for line in csv.reader(csvfile)]
def get_domains(examples):
    d=[set() for i in examples[0]]
    for x in examples: 
        for i,xi in enumerate(x): 
            d[i].add(xi)
    return [list(sorted(x)) for x in d]
def consistent(h1,h2):
    mgp=[]  #zip function
    for x,y in zip(h1,h2):
        mg= x=="?" or(x!="ɸ" and (x==y or y=="ɸ"))
        mgp.append(mg)
    return all(mgp) 
def min_generalizations(h,x):
    h_new=list(h)
    for i in range(len(h)):
        if not consistent(h[i:i+1],x[i:i+1]):    
            h_new[i]="?" if h[i]!="ɸ" else x[i]  
    return [tuple(h_new)]
def min_specializations(h,domains,x):
    results=[]
    for i in range(len(h)):
        if h[i]=="?":
            for val in domains[i]:
                if x[i]!=val:
                    h_new=h[:i]+(val,)+h[i+1:]  
                    results.append(h_new)
        elif h[i]!="ɸ":
            h_new=h[:i]+("ɸ",)+h[i+1:] 
            results.append(h_new)
    return results
def generalize_S(x,G,S):
    S_prev=list(S)
    for s in S_prev:
        if s not in S:
            continue
        if not consistent(s,x):
            S.remove(s)
            Splus=min_generalizations(s,x)  
            S.update([h for h in Splus if any([consistent(g,h) for g in G])])
            S.difference_update([h for h in S if any([consistent(h,h1) for h1 in S if h!=h1])])
    return S
def specialize_G(x,domains,G,S):
    G_prev=list(G)
    for g in G_prev:
        if g not in G:
            continue
        if consistent(g,x): 
            G.remove(g)
            Gminus=min_specializations(g,domains,x)
            
            G.update([h for h in Gminus if any([consistent(h,s) for s in S])])   
            G.difference_update([h for h in G if any([consistent(h,g1) for g1 in G if h!=g1])]) 
    return G
def candidate_elimination(examples):
    domains=get_domains(examples)[:-1]
    G = set([("?",)*len(domains)])
    S = set([("ɸ",)*len(domains)])
    
    i=0
    print("\n G[{0}]:".format(i),G)
    print("\n S[{0}]:".format(i),S) 
    
    for xcx in examples:
        i=i+1
        x,cx=xcx[:-1],xcx[-1]  
        if cx=="Y":
            G={g for g in G if consistent(g,x)}
            S=generalize_S(x,G,S)
        else:
            S={s for s in S if not consistent(s,x)}
            G=specialize_G(x,domains,G,S)
        print("\n G[{0}]:".format(i),G)
        print("\n S[{0}]:".format(i),S)
    return  
candidate_elimination(examples)
